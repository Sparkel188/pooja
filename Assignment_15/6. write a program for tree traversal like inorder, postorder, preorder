class TreeNode {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

// Inorder Traversal (Left -> Root -> Right)
function inorderTraversal(node) {
  if (node === null) return;
  inorderTraversal(node.left);
  console.log(node.value);
  inorderTraversal(node.right);
}

// Preorder Traversal (Root -> Left -> Right)
function preorderTraversal(node) {
  if (node === null) return;
  console.log(node.value);
  preorderTraversal(node.left);
  preorderTraversal(node.right);
}

// Postorder Traversal (Left -> Right -> Root)
function postorderTraversal(node) {
  if (node === null) return;
  postorderTraversal(node.left);
  postorderTraversal(node.right);
  console.log(node.value);
}

// Constructing the binary tree
const root = new TreeNode(10);
root.left = new TreeNode(5);
root.right = new TreeNode(15);
root.left.left = new TreeNode(3);
root.left.right = new TreeNode(7);
root.right.right = new TreeNode(20);

console.log("Inorder Traversal:");
inorderTraversal(root);

console.log("Preorder Traversal:");
preorderTraversal(root);

console.log("Postorder Traversal:");
postorderTraversal(root);